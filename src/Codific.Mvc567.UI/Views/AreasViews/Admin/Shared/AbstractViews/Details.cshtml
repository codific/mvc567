@*
This file is part of the mvc567 distribution (https://github.com/codific/mvc567).
Copyright (C) 2019 Codific Ltd.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@model EntityDetailsViewModel

@{
    ViewData["Title"] = Model.Title;
}

<div class="col-12 grid-margin stretch-card">
    
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">@Model.Title</h4>
            <table class="table table-striped">
                <tbody>
                    @foreach (var property in Model.Details.Properties)
                    {
                        <tr>
                            <td><strong>@property.Name:</strong></td>
                            <td class="white-space-normal">
                                <span id="property-@property.Name.Replace(" ", string.Empty).ToLower()-id">
                                    @{
                                        switch (property.Type)
                                        {
                                            case TableCellType.Text:
                                            case TableCellType.TextArea:
                                                <span>@property.Value?.ToString()</span>
                                                break;
                                            case TableCellType.Date:
                                                <span>@(((DateTime?)property.Value)?.ToString(Constants.DateFormat))</span>
                                                break;
                                            case TableCellType.Time:
                                                <span>@(((TimeSpan?)property.Value)?.ToString(Constants.TimeFormat))</span>
                                                break;
                                            case TableCellType.DateTime:
                                                <span>@(((DateTime?)property.Value)?.ToString(Constants.DateTimeFormat))</span>
                                                break;
                                            case TableCellType.Number:
                                                break;
                                            case TableCellType.File:
                                                <root-file-link id="@property?.Value?.ToString()"></root-file-link>
                                                break;
                                            case TableCellType.Flag:
                                                if ((bool)(property.Value))
                                                {
                                                    <div class="badge badge-success badge-pill p-1 font-size-12"><i class="mdi mdi-check"></i></div>
                                                }
                                                else
                                                {
                                                    <div class="badge badge-danger badge-pill p-1 font-size-12"><i class="mdi mdi-close"></i></div>
                                                }
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                </span>
                                
                            </td>
                            <td class="w-auto text-right">
                                @{
                                    switch (property.Type)
                                    {
                                        case TableCellType.Text:
                                        case TableCellType.TextArea:
                                        case TableCellType.Date:
                                        case TableCellType.Time:
                                        case TableCellType.DateTime:
                                        case TableCellType.Number:
                                            <span>
                                                <button type="button" class="btn btn-clipboard p-1" data-clipboard-action="copy" data-clipboard-target="#property-@property.Name.Replace(" ", string.Empty).ToLower()-id">
                                                    <i class="m-0 mdi mdi-clipboard-text"></i>
                                                </button>
                                            </span>
                                            break;
                                        default:
                                            break;
                                    }
                                }

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
